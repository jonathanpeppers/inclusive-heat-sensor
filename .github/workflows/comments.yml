name: comments

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, reopened]
  pull_request_review_comment:
    types: [created, edited]
  workflow_call:
    inputs:
      commentToPost:
        description: "The comment to post on the issue or pull request if it's getting heated."
        default: ""
        required: false
        type: string
      labelToAdd:
        description: "The label to add to an issue or pull request if it's getting heated."
        default: ""
        required: false
        type: string
      endpoint:
        description: "The web service to use for sentiment analysis."
        default: "https://icr-heat-sensor.wus3.sample-dev.azgrafana-test.io/api/HeatSensor"
        required: false
        type: string

jobs:
  comments:
    uses: jonathanpeppers/inclusive-heat-sensor/.github/workflows/comments.yml@dev/haritha/min-comment
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: comment if offensive or angry
        shell: pwsh
        continue-on-error: true
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Write-Host "Starting action..."

          $github = $env:GITHUB_CONTEXT | ConvertFrom-Json
          $github | Out-String | Write-Host
          Write-Host "$Env:GITHUB_CONTEXT"

          $isPr = true
          $commentId = ""
          if ($github.event_name -eq "pull_request") {
            $data = @{
              title = $github.event.pull_request.title;
              body = $github.event.pull_request.body;
            }
            $number = $github.event.number
            Write-Host "This was a pull request that was opened."
          } elseif ($github.event_name -eq "pull_request_review_comment") {
            $data = @{
              title = ""
              body = $github.event.comment.body
            }
            $commentId = $github.event.comment.id
            $number = $github.event.pull_request.number
            $isPr = true
            Write-Host "There was a review comment on a pull request."
          } elseif ($github.event_name -eq "issue_comment") {
            $data = @{
              title = ""
              body = $github.event.comment.body
            }
            $commentId = $github.event.comment.id
            $number = $github.event.issue.number
            $isPr = false
            Write-Host "There was a comment on an issue or pull request."
          } elseif ($github.event_name -eq "issues") {
            $data = @{
              title = $github.event.issue.title
              body = $github.event.issue.body
            }
            $number = $github.event.issue.number
            $isPr = false
            Write-Host "A new issue was opened."
          } else {
            Write-Error "TODO: $($github.event_name)"
          }

          $body = @{
            comment = "Title: $($data.title) `nBody:`n$($data.body)"
          }
          $bodyJson = $body | ConvertTo-Json -Compress
          
          Write-Host "Will send this JSON:"
          $bodyJson | Out-String | Write-Host
          
          $endpoint = "${{ inputs.endpoint }}"
          if (!$endpoint) {
            $endpoint = 'https://icr-heat-sensor.wus3.sample-dev.azgrafana-test.io/api/HeatSensor';
          }
          Write-Host "To: $endpoint"
          $result = Invoke-WebRequest -Method POST -Uri "$endpoint" -ContentType "application/json" -Body $bodyJson
          $result | Out-String | Write-Host
          
          if ($result.StatusCode -eq 200) {
            Write-Host "We got something!"
            $content = $result.Content | ConvertFrom-Json
            $anger = $content.anger
            $offensive = $content.offensive

            Write-Host "Anger: $anger"
            Write-Host "Offensive: $offensive"
            Write-Host "This is comment id: $commentId"
            if ($commentId) {
              Write-Host "Minimizing comment"

                $mutation =@"
          mutation {
              __typename
              minimizeComment(
                  input: {
                      subjectId: "$($commentId)",
                      classifier: ABUSE
                  }
              ) {
                  clientMutationId
              }
          }
          "@

              $payload = @{
                  query=$mutation
              }

              $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
              $headers.Add("content-type","application/json")
              $headers.Add("Authorization","bearer $Env:GITHUB_TOKEN")

              $body = ConvertTo-Json $payload
              $url = "https://api.github.com/graphql"
              $response= Invoke-RestMethod -Uri $url -Headers $headers -Method "POST" -Body $body

              Write-Host "Minimized comment"
            } else {
              Write-Host "No comment id to minimize"
            }

            if ($anger -ge 3 -and $offensive -ge 3) {
              Write-Host "Anger/Offense condition reached"
              $commentToPost = "${{ inputs.commentToPost }}"
              if ($commentToPost) {
                if ($isPr) {
                  & gh pr comment "$number" --repo "${{ github.repository }}" --body "$commentToPost"
                } else {
                  & gh issue comment "$number" --repo "${{ github.repository }}" --body "$commentToPost"
                }
              }

              $labelToAdd = "${{ inputs.labelToAdd }}"
              if ($labelToAdd) {
                if ($isPr) {
                  & gh pr edit "$number" --add-label "$labelToAdd" --repo "${{ github.repository }}"
                } else {
                  & gh issue edit "$number" --add-label "$labelToAdd" --repo "${{ github.repository }}"
                }
              }

              if (!$commentToPost -and !$labelToAdd) {
                Write-Host "Neither 'commentToPost' nor 'labelToAdd' was set, so not notifying anybody"
              }
            } else {
              Write-Host "Comment is OK"
            }
          } else {
            Write-Host "We got nothing :("
          }
          exit 0
